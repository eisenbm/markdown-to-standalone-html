{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport MarkdownIt from 'markdown-it'\nimport mdFigure from 'markdown-it-implicit-figures'\nimport { minify } from 'html-minifier'\n\nimport hljs from 'highlight.js'\nimport mdAnchor from 'markdown-it-anchor'\nimport uslug from 'uslug'\nimport mdToc from 'markdown-toc'\nimport mdImg from './plugins/markdown-it-embedded-images'\nimport mdKatex from '@traptitech/markdown-it-katex'\nimport mdChords from './plugins/markdown-it-code-chords'\nimport mdChordsong from './plugins/markdown-it-chordsong'\nimport mdOpenLink from './plugins/markdown-it-open-link'\n\nexport interface Plugin {\n  name: string\n  options?: object\n}\n\ninterface Options {\n  basePath: string\n  template: string // an absolute path to the template file. Either '.html' or '.toc.html'\n  stylesheet: string // an absolute path to the stylesheet file\n  plugins: Plugin[]\n}\n\nexport default async function markdownToStandAloneHtml (mdContents: string, {\n  basePath = '.',\n  template = path.resolve(__dirname, '..', 'templates', 'template.html'),\n  plugins = []\n}: Partial<Options>): Promise<string> {\n  const mdItOptions = {\n    html: true, // Enable HTML tags in source\n    xhtmlOut: false, // Use '/' to close single tags (<br />).\n    // This is only for full CommonMark compatibility.\n    breaks: false, // Convert '\\n' in paragraphs into <br>\n    langPrefix: 'language-', // CSS language prefix for fenced blocks. Can be\n    // useful for external highlighters.\n    linkify: false, // Autoconvert URL-like text to links\n\n    // Enable some language-neutral replacement + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '“”‘’'\n  }\n  const cssArr = []\n  const scriptArr = []\n\n  let plugin = plugins.find(plugin => plugin.name === 'highlightjs')\n  if (plugin !== undefined) {\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    // @ts-expect-error\n    mdItOptions.highlight = function (str: string, language?: string) {\n      if (language !== undefined && hljs.getLanguage(language) !== undefined) {\n        try {\n          return '<pre><code class=\"hljs\">' +\n            hljs.highlight(str, { language, ignoreIllegals: true }).value +\n            '</code></pre>'\n        } catch (__) { }\n      }\n      return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>'\n    }\n    // @ts-expect-error\n    cssArr.push(fs.readFileSync(require.resolve(`highlight.js/styles/${plugin.options.theme as string}.css`), 'utf8'))\n  }\n\n  const md = MarkdownIt(mdItOptions)\n\n  md.use(mdFigure, {\n    dataType: false, // <figure data-type=\"image\">, default: false\n    figcaption: false, // <figcaption>alternative text</figcaption>, default: false\n    tabindex: false, // <figure tabindex=\"1+n\">..., default: false\n    link: false // <a href=\"img.png\"><img src=\"img.png\"></a>, default: false\n  })\n\n  let templateStr: string\n  if (template.length > 8 && template.slice(-9) === '.toc.html') {\n    template = template.slice(0, template.length - 9) + '.html'\n  }\n\n  plugin = plugins.find(plugin => plugin.name === 'toc')\n  if (plugin !== undefined) {\n    const templateFileWithToc = path.join(path.dirname(template), `${path.basename(template, '.html')}.toc.html`)\n    if (!fs.existsSync(templateFileWithToc)) {\n      throw new Error(`Can't find template file '${templateFileWithToc}'`)\n    }\n    templateStr = fs.readFileSync(templateFileWithToc, 'utf8')\n\n    md.use(mdAnchor, { level: 2, slugify: uslug })\n\n    // @ts-expect-error\n    const tocContents = md.render(mdToc(mdContents, { firsth1: false, slugify: uslug, maxdepth: plugin.options.tocMaxDepth }).content)\n    // @ts-expect-error\n    templateStr = templateStr.replace('<!-- {{TOC_TITLE}} -->', plugin.options.tocTitle)\n      .replace('<!-- {{TOC}} -->', tocContents)\n  } else {\n    if (!fs.existsSync(template)) {\n      throw new Error(`Can't find template file '${template}'`)\n    }\n    templateStr = fs.readFileSync(template, 'utf8')\n  }\n\n  md.use(mdImg, basePath)\n\n  plugin = plugins.find(plugin => plugin.name === 'katex')\n  if (plugin !== undefined) {\n    md.use(mdKatex, { throwOnError: true })\n\n    // Let us embed custom KaTeX fonts in the CSS\n    const cssRegex = /url\\((.+?)\\) format\\(['\"](.+?)['\"]\\)/g\n    const cssContents = fs.readFileSync(require.resolve('katex/dist/katex.css'), 'utf8').replace(cssRegex, (match: string, p1: string, p2: string) => {\n      const fontFileBuf = fs.readFileSync(require.resolve(`katex/dist/${p1}`))\n      return `url(data:font/${p2};base64,${fontFileBuf.toString('base64')})`\n    })\n    cssArr.push(cssContents)\n  }\n\n  plugin = plugins.find(plugin => plugin.name === 'code-chords')\n  if (plugin !== undefined) {\n    md.use(mdChords)\n    cssArr.push(fs.readFileSync(require.resolve('markdown-it-chords/markdown-it-chords.css'), 'utf-8'))\n  }\n\n  plugin = plugins.find(plugin => plugin.name === 'chordsong')\n  if (plugin !== undefined) {\n    md.use(mdChordsong, cssArr)\n  }\n\n  plugin = plugins.find(plugin => plugin.name === 'bootstrapCss')\n  if (plugin !== undefined) {\n    cssArr.push(fs.readFileSync(require.resolve('bootstrap/dist/css/bootstrap.css'), 'utf8'))\n  }\n\n  plugin = plugins.find(plugin => plugin.name === 'bootstrapJs')\n  if (plugin !== undefined) {\n    const removeMapRegEx = /\\/{2}# sourceMappingURL=\\S*/g\n    scriptArr.push(fs.readFileSync(require.resolve('jquery/dist/jquery.slim.min.js'), 'utf8').replace(removeMapRegEx, ''))\n    scriptArr.push(fs.readFileSync(require.resolve('bootstrap/dist/js/bootstrap.bundle.min.js'), 'utf8').replace(removeMapRegEx, ''))\n  }\n\n  plugin = plugins.find(plugin => plugin.name == 'open-link')\n  if (plugin !== undefined) {\n    md.use(mdOpenLink)\n  }\n\n  const main = md.render(mdContents)\n\n  const titleRegex = /<h1>(.+?)<\\/h1>/s\n  const titleMatch = main.match(titleRegex)\n  const title = (titleMatch !== null) ? titleMatch[1] : 'Readme'\n\n  const css = `<style type=\"text/css\">${cssArr.join('\\n')}</style>`\n\n  const script = `<script>\\n${scriptArr.join('\\n</script>\\n<script>\\n')}\\n</script>`\n\n  templateStr = templateStr.replace('<!-- {{CSS}} -->', css)\n    .replace('<!-- {{MAIN}} -->', main)\n    .replace('<!-- {{TITLE}} -->', title)\n    .replace('<!-- {{SCRIPT}} -->', script)\n\n  const output = minify(templateStr, {\n    minifyCSS: true\n  })\n\n  return output\n}\n"]}