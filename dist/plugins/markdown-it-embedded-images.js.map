{"version":3,"file":"markdown-it-embedded-images.js","sourceRoot":"","sources":["../../src/plugins/markdown-it-embedded-images.ts"],"names":[],"mappings":";;;;;AAAA,4CAAmB;AACnB,gDAAuB;AACvB,oDAA0B;AAC1B,4DAAuD;AACvD,gEAAkC;AAIlC,SAAwB,oBAAoB,CAAE,EAAc,EAAE,QAAQ,GAAG,EAAE;IACzE,MAAM,aAAa,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAmB,CAAA;IAE3D,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,GAAG,UAAU,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI;QACjE,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;QACzB,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QAChC,IAAI,GAAG,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;YACzE,IAAI,MAAM,GAAG,IAAI,CAAA;YACjB,IAAI,CAAC;gBACH,MAAM,GAAG,YAAE,CAAC,YAAY,CAAC,cAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAA;YACvD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC;oBACH,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAA;gBACxB,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,GAAG,CAAC,CAAA;oBACnC,OAAO,CAAC,GAAG,CAAC,SAAS,GAAI,KAAgB,CAAC,CAAA;gBAC5C,CAAC;YACH,CAAC;YACD,IAAI,MAAM,IAAI,IAAI,EAAE,CAAC;gBACnB,IAAI,WAAW,GAAG,EAAE,CAAA;gBACpB,IAAI,IAAA,gBAAK,EAAC,MAAM,CAAC,EAAE,CAAC;oBAClB,WAAW,GAAG,eAAe,CAAA;gBAC/B,CAAC;qBAAM,CAAC;oBACN,IAAI,IAAA,oBAAS,EAAC,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;wBAC/B,WAAW,GAAI,IAAA,oBAAS,EAAC,MAAM,CAAqB,CAAC,IAAI,CAAA;oBAC3D,CAAC;yBAAM,CAAC;wBACN,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,GAAG,CAAC,CAAA;oBAC7C,CAAC;gBACH,CAAC;gBACD,IAAI,WAAW,KAAK,EAAE;oBAAE,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,WAAW,WAAW,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;YACzG,CAAC;QACH,CAAC;QAGD,OAAO,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;IACvD,CAAC,CAAA;AACH,CAAC;AApCD,uCAoCC;AAED,SAAS,QAAQ,CAAE,GAAW;IAC5B,MAAM,QAAQ,GAAG,IAAA,sBAAO,EAAC,KAAK,EAAE,GAAG,CAAC,CAAA;IACpC,IAAI,QAAQ,CAAC,UAAU,IAAI,GAAG,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CACb,oCAAoC;YAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC3B,KAAK;YACL,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAC3B,CAAA;IACH,CAAC;IACD,OAAO,QAAQ,CAAC,IAAc,CAAA;AAChC,CAAC","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport isSvg from 'is-svg'\nimport imageType, { ImageTypeResult } from 'image-type'\nimport request from 'sync-request'\nimport MarkdownIt from 'markdown-it'\nimport { RenderRule } from 'markdown-it/lib/renderer'\n\nexport default function urlimgToBase64Plugin (md: MarkdownIt, basePath = ''): void {\n  const defaultRender = md.renderer.rules.image as RenderRule\n\n  md.renderer.rules.image = function (tokens, idx, options, env, self) {\n    const token = tokens[idx]\n    const src = token.attrGet('src')\n    if (src !== null && !src.includes(';base64,') && !src.startsWith('http')) {\n      let imgBuf = null\n      try {\n        imgBuf = fs.readFileSync(path.resolve(basePath, src))\n      } catch (error) {\n        try {\n          imgBuf = getImage(src)\n        } catch (error) {\n          console.log('Could not get ' + src)\n          console.log('Error: ' + (error as string))\n        }\n      }\n      if (imgBuf != null) {\n        let imgMimeType = ''\n        if (isSvg(imgBuf)) {\n          imgMimeType = 'image/svg+xml'\n        } else {\n          if (imageType(imgBuf) !== null) {\n            imgMimeType = (imageType(imgBuf) as ImageTypeResult).mime\n          } else {\n            console.log('Unknown mime type for ' + src)\n          }\n        }\n        if (imgMimeType !== '') token.attrSet('src', `data:${imgMimeType};base64,${imgBuf.toString('base64')}`)\n      }\n    }\n\n    // pass token to default renderer.\n    return defaultRender(tokens, idx, options, env, self)\n  }\n}\n\nfunction getImage (url: string): Buffer {\n  const response = request('GET', url)\n  if (response.statusCode >= 300) {\n    throw new Error(\n      'Server responded with status code ' +\n        String(response.statusCode) +\n        ':\\n' +\n        response.body.toString()\n    )\n  }\n  return response.body as Buffer\n}\n"]}