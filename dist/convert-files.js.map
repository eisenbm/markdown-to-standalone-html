{"version":3,"file":"convert-files.js","sourceRoot":"","sources":["../src/convert-files.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/node\nconst path = require('path')\nconst fs = require('fs')\nconst { exec } = require(\"child_process\")\nconst YAML = require('yaml-front-matter')\n\nconst ignore = ['.', '..', '.DS_Store', '.gitkeep', '.gitignore']\n\n// convert slugified file name to human readable\n// capitalize first letter of each word\nfunction unslugify (file: string) {\n  file = file.replace(/-/g, ' ')\n  return file.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()})\n}\n\nfunction getFiles (dirPath: string, arrayOfFiles: Array<string> = []) {\n  let files = fs.readdirSync(dirPath)\n\n  const distPath = dirPath.replace('docs/', 'dist/')\n  console.log(distPath)\n  exec(`mkdir ${distPath}`)\n\n  files.filter((file: string) => !ignore.includes(file)).forEach(function (file:string) {\n    console.log(dirPath)\n    if (fs.lstatSync(dirPath + '/' + file).isDirectory()) {\n      arrayOfFiles = getFiles(dirPath + '/' + file, arrayOfFiles)\n    } else if (fs.lstatSync(dirPath + '/' + file).isFile() && file.endsWith('.md')) {\n      arrayOfFiles.push(path.join(dirPath, \"/\", file))\n    }\n  })\n\n  return arrayOfFiles\n}\n\nfunction convertFiles (files: Array<string>, srcFolder: string, distFolder: string) {\n  files.forEach(file => {\n    const inputPath = file\n    const outputPath = file.replace(srcFolder, distFolder).replace('.md', '.html')\n\n    convertFile(inputPath, outputPath)\n  })\n}\n\nfunction convertFile (inputPath: string, outputPath: string) {\n  fs.readFile(inputPath, 'utf8', function (err: string, fileContents: string) {\n    const yaml = YAML.loadFront(fileContents)\n    const filename = outputPath.substring(outputPath.lastIndexOf('/'), outputPath.lastIndexOf('.'))\n    const title = yaml.title || unslugify(filename)\n\n    outputPath = outputPath.replace(filename, `\"${title}\"`)\n    console.log(filename, outputPath)\n\n    exec(`./dist/markdown-to-standalone-html.js -K -C -CC -B -hs atom-one-dark-reasonable -d 0 -o ${outputPath} ${inputPath}`, function(err: string, stdout: string, stderr: string) {\n      if (err) {\n        console.log(err)\n        return\n      }\n      console.log(stdout)\n    })\n  })\n}\n\nconst docsPath = path.join(__dirname, 'docs')\nconst distPath = path.join(__dirname, 'dist')\n\nexec(\"rm -rf dist/*\")\nconst files = getFiles(docsPath)\nconvertFiles(files, 'docs', 'dist')\n"]}